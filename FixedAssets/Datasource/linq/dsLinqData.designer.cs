#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FixedAssets.Datasource.linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FixedAssets")]
	public partial class dsLinqDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRule(Rule instance);
    partial void UpdateRule(Rule instance);
    partial void DeleteRule(Rule instance);
    partial void InsertTblEmp(TblEmp instance);
    partial void UpdateTblEmp(TblEmp instance);
    partial void DeleteTblEmp(TblEmp instance);
    partial void InsertCdJob(CdJob instance);
    partial void UpdateCdJob(CdJob instance);
    partial void DeleteCdJob(CdJob instance);
    partial void InsertCdDepertment(CdDepertment instance);
    partial void UpdateCdDepertment(CdDepertment instance);
    partial void DeleteCdDepertment(CdDepertment instance);
    partial void InsertCdAssetplace(CdAssetplace instance);
    partial void UpdateCdAssetplace(CdAssetplace instance);
    partial void DeleteCdAssetplace(CdAssetplace instance);
    partial void InsertCdAssetState(CdAssetState instance);
    partial void UpdateCdAssetState(CdAssetState instance);
    partial void DeleteCdAssetState(CdAssetState instance);
    partial void InsertCdAssetPropertiy(CdAssetPropertiy instance);
    partial void UpdateCdAssetPropertiy(CdAssetPropertiy instance);
    partial void DeleteCdAssetPropertiy(CdAssetPropertiy instance);
    partial void InsertCDComponent(CDComponent instance);
    partial void UpdateCDComponent(CDComponent instance);
    partial void DeleteCDComponent(CDComponent instance);
    partial void InsertCdAssetsCategory(CdAssetsCategory instance);
    partial void UpdateCdAssetsCategory(CdAssetsCategory instance);
    partial void DeleteCdAssetsCategory(CdAssetsCategory instance);
    partial void InsertCDUnit(CDUnit instance);
    partial void UpdateCDUnit(CDUnit instance);
    partial void DeleteCDUnit(CDUnit instance);
    partial void InsertTblAsnaf(TblAsnaf instance);
    partial void UpdateTblAsnaf(TblAsnaf instance);
    partial void DeleteTblAsnaf(TblAsnaf instance);
    partial void InsertCDBuyorderreson(CDBuyorderreson instance);
    partial void UpdateCDBuyorderreson(CDBuyorderreson instance);
    partial void DeleteCDBuyorderreson(CDBuyorderreson instance);
    partial void InsertCDAsnaftype(CDAsnaftype instance);
    partial void UpdateCDAsnaftype(CDAsnaftype instance);
    partial void DeleteCDAsnaftype(CDAsnaftype instance);
    partial void InsertTBLSupplier(TBLSupplier instance);
    partial void UpdateTBLSupplier(TBLSupplier instance);
    partial void DeleteTBLSupplier(TBLSupplier instance);
    partial void InsertTBLBuyorder(TBLBuyorder instance);
    partial void UpdateTBLBuyorder(TBLBuyorder instance);
    partial void DeleteTBLBuyorder(TBLBuyorder instance);
    partial void InsertTBLTwreedOrder(TBLTwreedOrder instance);
    partial void UpdateTBLTwreedOrder(TBLTwreedOrder instance);
    partial void DeleteTBLTwreedOrder(TBLTwreedOrder instance);
    partial void InsertCdJoblagna(CdJoblagna instance);
    partial void UpdateCdJoblagna(CdJoblagna instance);
    partial void DeleteCdJoblagna(CdJoblagna instance);
    partial void InsertCDStore(CDStore instance);
    partial void UpdateCDStore(CDStore instance);
    partial void DeleteCDStore(CDStore instance);
    partial void InsertTBLCheck(TBLCheck instance);
    partial void UpdateTBLCheck(TBLCheck instance);
    partial void DeleteTBLCheck(TBLCheck instance);
    #endregion
		
		public dsLinqDataDataContext() : 
				base(global::FixedAssets.Properties.Settings.Default.FixedAssetsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dsLinqDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dsLinqDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dsLinqDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dsLinqDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Rule> Rules
		{
			get
			{
				return this.GetTable<Rule>();
			}
		}
		
		public System.Data.Linq.Table<TblEmp> TblEmps
		{
			get
			{
				return this.GetTable<TblEmp>();
			}
		}
		
		public System.Data.Linq.Table<CdJob> CdJobs
		{
			get
			{
				return this.GetTable<CdJob>();
			}
		}
		
		public System.Data.Linq.Table<CdDepertment> CdDepertments
		{
			get
			{
				return this.GetTable<CdDepertment>();
			}
		}
		
		public System.Data.Linq.Table<CdAssetplace> CdAssetplaces
		{
			get
			{
				return this.GetTable<CdAssetplace>();
			}
		}
		
		public System.Data.Linq.Table<CdAssetState> CdAssetStates
		{
			get
			{
				return this.GetTable<CdAssetState>();
			}
		}
		
		public System.Data.Linq.Table<CdAssetPropertiy> CdAssetPropertiys
		{
			get
			{
				return this.GetTable<CdAssetPropertiy>();
			}
		}
		
		public System.Data.Linq.Table<CDComponent> CDComponents
		{
			get
			{
				return this.GetTable<CDComponent>();
			}
		}
		
		public System.Data.Linq.Table<CdAssetsCategory> CdAssetsCategories
		{
			get
			{
				return this.GetTable<CdAssetsCategory>();
			}
		}
		
		public System.Data.Linq.Table<CDUnit> CDUnits
		{
			get
			{
				return this.GetTable<CDUnit>();
			}
		}
		
		public System.Data.Linq.Table<TblAsnaf> TblAsnafs
		{
			get
			{
				return this.GetTable<TblAsnaf>();
			}
		}
		
		public System.Data.Linq.Table<CDBuyorderreson> CDBuyorderresons
		{
			get
			{
				return this.GetTable<CDBuyorderreson>();
			}
		}
		
		public System.Data.Linq.Table<CDAsnaftype> CDAsnaftypes
		{
			get
			{
				return this.GetTable<CDAsnaftype>();
			}
		}
		
		public System.Data.Linq.Table<TBLSupplier> TBLSuppliers
		{
			get
			{
				return this.GetTable<TBLSupplier>();
			}
		}
		
		public System.Data.Linq.Table<TBLBuyorder> TBLBuyorders
		{
			get
			{
				return this.GetTable<TBLBuyorder>();
			}
		}
		
		public System.Data.Linq.Table<TBLTwreedOrder> TBLTwreedOrders
		{
			get
			{
				return this.GetTable<TBLTwreedOrder>();
			}
		}
		
		public System.Data.Linq.Table<CdJoblagna> CdJoblagnas
		{
			get
			{
				return this.GetTable<CdJoblagna>();
			}
		}
		
		public System.Data.Linq.Table<CDStore> CDStores
		{
			get
			{
				return this.GetTable<CDStore>();
			}
		}
		
		public System.Data.Linq.Table<TBLCheck> TBLChecks
		{
			get
			{
				return this.GetTable<TBLCheck>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<System.DateTime> _LastActivityDate;
		
		private System.Nullable<bool> _IsAdmin;
		
		private System.Nullable<byte> _ModereaId;
		
		private int _EmpId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnLastActivityDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastActivityDateChanged();
    partial void OnIsAdminChanging(System.Nullable<bool> value);
    partial void OnIsAdminChanged();
    partial void OnModereaIdChanging(System.Nullable<byte> value);
    partial void OnModereaIdChanged();
    partial void OnEmpIdChanging(int value);
    partial void OnEmpIdChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit")]
		public System.Nullable<bool> IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModereaId", DbType="TinyInt")]
		public System.Nullable<byte> ModereaId
		{
			get
			{
				return this._ModereaId;
			}
			set
			{
				if ((this._ModereaId != value))
				{
					this.OnModereaIdChanging(value);
					this.SendPropertyChanging();
					this._ModereaId = value;
					this.SendPropertyChanged("ModereaId");
					this.OnModereaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpId", DbType="Int NOT NULL")]
		public int EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					this.OnEmpIdChanging(value);
					this.SendPropertyChanging();
					this._EmpId = value;
					this.SendPropertyChanged("EmpId");
					this.OnEmpIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rule]")]
	public partial class Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RuleID;
		
		private string _RuleName;
		
		private string _RuleDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleIDChanging(int value);
    partial void OnRuleIDChanged();
    partial void OnRuleNameChanging(string value);
    partial void OnRuleNameChanged();
    partial void OnRuleDescChanging(string value);
    partial void OnRuleDescChanged();
    #endregion
		
		public Rule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleName", DbType="NVarChar(100)")]
		public string RuleName
		{
			get
			{
				return this._RuleName;
			}
			set
			{
				if ((this._RuleName != value))
				{
					this.OnRuleNameChanging(value);
					this.SendPropertyChanging();
					this._RuleName = value;
					this.SendPropertyChanged("RuleName");
					this.OnRuleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleDesc", DbType="NVarChar(100)")]
		public string RuleDesc
		{
			get
			{
				return this._RuleDesc;
			}
			set
			{
				if ((this._RuleDesc != value))
				{
					this.OnRuleDescChanging(value);
					this.SendPropertyChanging();
					this._RuleDesc = value;
					this.SendPropertyChanged("RuleDesc");
					this.OnRuleDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblEmp")]
	public partial class TblEmp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmpId;
		
		private string _EmpName;
		
		private byte _EmpJobId;
		
		private byte _EmpDepertment;
		
		private System.DateTime _dateIn;
		
		private int _UserIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpIdChanging(int value);
    partial void OnEmpIdChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnEmpJobIdChanging(byte value);
    partial void OnEmpJobIdChanged();
    partial void OnEmpDepertmentChanging(byte value);
    partial void OnEmpDepertmentChanged();
    partial void OndateInChanging(System.DateTime value);
    partial void OndateInChanged();
    partial void OnUserInChanging(int value);
    partial void OnUserInChanged();
    #endregion
		
		public TblEmp()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					this.OnEmpIdChanging(value);
					this.SendPropertyChanging();
					this._EmpId = value;
					this.SendPropertyChanged("EmpId");
					this.OnEmpIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpName", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpJobId", DbType="TinyInt NOT NULL")]
		public byte EmpJobId
		{
			get
			{
				return this._EmpJobId;
			}
			set
			{
				if ((this._EmpJobId != value))
				{
					this.OnEmpJobIdChanging(value);
					this.SendPropertyChanging();
					this._EmpJobId = value;
					this.SendPropertyChanged("EmpJobId");
					this.OnEmpJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDepertment", DbType="TinyInt NOT NULL")]
		public byte EmpDepertment
		{
			get
			{
				return this._EmpDepertment;
			}
			set
			{
				if ((this._EmpDepertment != value))
				{
					this.OnEmpDepertmentChanging(value);
					this.SendPropertyChanging();
					this._EmpDepertment = value;
					this.SendPropertyChanged("EmpDepertment");
					this.OnEmpDepertmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateIn", DbType="DateTime NOT NULL")]
		public System.DateTime dateIn
		{
			get
			{
				return this._dateIn;
			}
			set
			{
				if ((this._dateIn != value))
				{
					this.OndateInChanging(value);
					this.SendPropertyChanging();
					this._dateIn = value;
					this.SendPropertyChanged("dateIn");
					this.OndateInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIn", DbType="Int NOT NULL")]
		public int UserIn
		{
			get
			{
				return this._UserIn;
			}
			set
			{
				if ((this._UserIn != value))
				{
					this.OnUserInChanging(value);
					this.SendPropertyChanging();
					this._UserIn = value;
					this.SendPropertyChanged("UserIn");
					this.OnUserInChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CdJob")]
	public partial class CdJob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _JobId;
		
		private string _JobName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(byte value);
    partial void OnJobIdChanged();
    partial void OnJobNameChanging(string value);
    partial void OnJobNameChanged();
    #endregion
		
		public CdJob()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string JobName
		{
			get
			{
				return this._JobName;
			}
			set
			{
				if ((this._JobName != value))
				{
					this.OnJobNameChanging(value);
					this.SendPropertyChanging();
					this._JobName = value;
					this.SendPropertyChanged("JobName");
					this.OnJobNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CdDepertment")]
	public partial class CdDepertment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _DepertmentId;
		
		private string _Depertment;
		
		private EntitySet<TBLBuyorder> _TBLBuyorders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepertmentIdChanging(byte value);
    partial void OnDepertmentIdChanged();
    partial void OnDepertmentChanging(string value);
    partial void OnDepertmentChanged();
    #endregion
		
		public CdDepertment()
		{
			this._TBLBuyorders = new EntitySet<TBLBuyorder>(new Action<TBLBuyorder>(this.attach_TBLBuyorders), new Action<TBLBuyorder>(this.detach_TBLBuyorders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepertmentId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte DepertmentId
		{
			get
			{
				return this._DepertmentId;
			}
			set
			{
				if ((this._DepertmentId != value))
				{
					this.OnDepertmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepertmentId = value;
					this.SendPropertyChanged("DepertmentId");
					this.OnDepertmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depertment", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Depertment
		{
			get
			{
				return this._Depertment;
			}
			set
			{
				if ((this._Depertment != value))
				{
					this.OnDepertmentChanging(value);
					this.SendPropertyChanging();
					this._Depertment = value;
					this.SendPropertyChanged("Depertment");
					this.OnDepertmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CdDepertment_TBLBuyorder", Storage="_TBLBuyorders", ThisKey="DepertmentId", OtherKey="DepertmentId")]
		public EntitySet<TBLBuyorder> TBLBuyorders
		{
			get
			{
				return this._TBLBuyorders;
			}
			set
			{
				this._TBLBuyorders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBLBuyorders(TBLBuyorder entity)
		{
			this.SendPropertyChanging();
			entity.CdDepertment = this;
		}
		
		private void detach_TBLBuyorders(TBLBuyorder entity)
		{
			this.SendPropertyChanging();
			entity.CdDepertment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CdAssetplace")]
	public partial class CdAssetplace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssetplaceId;
		
		private string _Assetplace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetplaceIdChanging(int value);
    partial void OnAssetplaceIdChanged();
    partial void OnAssetplaceChanging(string value);
    partial void OnAssetplaceChanged();
    #endregion
		
		public CdAssetplace()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetplaceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssetplaceId
		{
			get
			{
				return this._AssetplaceId;
			}
			set
			{
				if ((this._AssetplaceId != value))
				{
					this.OnAssetplaceIdChanging(value);
					this.SendPropertyChanging();
					this._AssetplaceId = value;
					this.SendPropertyChanged("AssetplaceId");
					this.OnAssetplaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assetplace", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Assetplace
		{
			get
			{
				return this._Assetplace;
			}
			set
			{
				if ((this._Assetplace != value))
				{
					this.OnAssetplaceChanging(value);
					this.SendPropertyChanging();
					this._Assetplace = value;
					this.SendPropertyChanged("Assetplace");
					this.OnAssetplaceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CdAssetState")]
	public partial class CdAssetState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _AssetStateId;
		
		private string _AssetState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetStateIdChanging(byte value);
    partial void OnAssetStateIdChanged();
    partial void OnAssetStateChanging(string value);
    partial void OnAssetStateChanged();
    #endregion
		
		public CdAssetState()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetStateId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte AssetStateId
		{
			get
			{
				return this._AssetStateId;
			}
			set
			{
				if ((this._AssetStateId != value))
				{
					this.OnAssetStateIdChanging(value);
					this.SendPropertyChanging();
					this._AssetStateId = value;
					this.SendPropertyChanged("AssetStateId");
					this.OnAssetStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetState", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string AssetState
		{
			get
			{
				return this._AssetState;
			}
			set
			{
				if ((this._AssetState != value))
				{
					this.OnAssetStateChanging(value);
					this.SendPropertyChanging();
					this._AssetState = value;
					this.SendPropertyChanged("AssetState");
					this.OnAssetStateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CdAssetPropertiy")]
	public partial class CdAssetPropertiy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _AssetPropertiyId;
		
		private string _AssetPropertiy;
		
		private string _AssetPropertiyDes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetPropertiyIdChanging(byte value);
    partial void OnAssetPropertiyIdChanged();
    partial void OnAssetPropertiyChanging(string value);
    partial void OnAssetPropertiyChanged();
    partial void OnAssetPropertiyDesChanging(string value);
    partial void OnAssetPropertiyDesChanged();
    #endregion
		
		public CdAssetPropertiy()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetPropertiyId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte AssetPropertiyId
		{
			get
			{
				return this._AssetPropertiyId;
			}
			set
			{
				if ((this._AssetPropertiyId != value))
				{
					this.OnAssetPropertiyIdChanging(value);
					this.SendPropertyChanging();
					this._AssetPropertiyId = value;
					this.SendPropertyChanged("AssetPropertiyId");
					this.OnAssetPropertiyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetPropertiy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetPropertiy
		{
			get
			{
				return this._AssetPropertiy;
			}
			set
			{
				if ((this._AssetPropertiy != value))
				{
					this.OnAssetPropertiyChanging(value);
					this.SendPropertyChanging();
					this._AssetPropertiy = value;
					this.SendPropertyChanged("AssetPropertiy");
					this.OnAssetPropertiyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetPropertiyDes", DbType="NVarChar(50)")]
		public string AssetPropertiyDes
		{
			get
			{
				return this._AssetPropertiyDes;
			}
			set
			{
				if ((this._AssetPropertiyDes != value))
				{
					this.OnAssetPropertiyDesChanging(value);
					this.SendPropertyChanging();
					this._AssetPropertiyDes = value;
					this.SendPropertyChanged("AssetPropertiyDes");
					this.OnAssetPropertiyDesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CDComponents")]
	public partial class CDComponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComponentId;
		
		private string _Component;
		
		private string _ComponentDes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComponentIdChanging(int value);
    partial void OnComponentIdChanged();
    partial void OnComponentChanging(string value);
    partial void OnComponentChanged();
    partial void OnComponentDesChanging(string value);
    partial void OnComponentDesChanged();
    #endregion
		
		public CDComponent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ComponentId
		{
			get
			{
				return this._ComponentId;
			}
			set
			{
				if ((this._ComponentId != value))
				{
					this.OnComponentIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentId = value;
					this.SendPropertyChanged("ComponentId");
					this.OnComponentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Component", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Component
		{
			get
			{
				return this._Component;
			}
			set
			{
				if ((this._Component != value))
				{
					this.OnComponentChanging(value);
					this.SendPropertyChanging();
					this._Component = value;
					this.SendPropertyChanged("Component");
					this.OnComponentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentDes", DbType="NVarChar(100)")]
		public string ComponentDes
		{
			get
			{
				return this._ComponentDes;
			}
			set
			{
				if ((this._ComponentDes != value))
				{
					this.OnComponentDesChanging(value);
					this.SendPropertyChanging();
					this._ComponentDes = value;
					this.SendPropertyChanged("ComponentDes");
					this.OnComponentDesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CdAssetsCategory")]
	public partial class CdAssetsCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssetsCategoryID;
		
		private string _AssetsCategoryName;
		
		private int _parentID;
		
		private int _UserIn;
		
		private System.DateTime _dateIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetsCategoryIDChanging(int value);
    partial void OnAssetsCategoryIDChanged();
    partial void OnAssetsCategoryNameChanging(string value);
    partial void OnAssetsCategoryNameChanged();
    partial void OnparentIDChanging(int value);
    partial void OnparentIDChanged();
    partial void OnUserInChanging(int value);
    partial void OnUserInChanged();
    partial void OndateInChanging(System.DateTime value);
    partial void OndateInChanged();
    #endregion
		
		public CdAssetsCategory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetsCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssetsCategoryID
		{
			get
			{
				return this._AssetsCategoryID;
			}
			set
			{
				if ((this._AssetsCategoryID != value))
				{
					this.OnAssetsCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._AssetsCategoryID = value;
					this.SendPropertyChanged("AssetsCategoryID");
					this.OnAssetsCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetsCategoryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetsCategoryName
		{
			get
			{
				return this._AssetsCategoryName;
			}
			set
			{
				if ((this._AssetsCategoryName != value))
				{
					this.OnAssetsCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._AssetsCategoryName = value;
					this.SendPropertyChanged("AssetsCategoryName");
					this.OnAssetsCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int NOT NULL")]
		public int parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIn", DbType="Int NOT NULL")]
		public int UserIn
		{
			get
			{
				return this._UserIn;
			}
			set
			{
				if ((this._UserIn != value))
				{
					this.OnUserInChanging(value);
					this.SendPropertyChanging();
					this._UserIn = value;
					this.SendPropertyChanged("UserIn");
					this.OnUserInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateIn", DbType="DateTime NOT NULL")]
		public System.DateTime dateIn
		{
			get
			{
				return this._dateIn;
			}
			set
			{
				if ((this._dateIn != value))
				{
					this.OndateInChanging(value);
					this.SendPropertyChanging();
					this._dateIn = value;
					this.SendPropertyChanged("dateIn");
					this.OndateInChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CDUnit")]
	public partial class CDUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitId;
		
		private string _UnitName;
		
		private EntitySet<TblAsnaf> _TblAsnafs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitIdChanging(int value);
    partial void OnUnitIdChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    #endregion
		
		public CDUnit()
		{
			this._TblAsnafs = new EntitySet<TblAsnaf>(new Action<TblAsnaf>(this.attach_TblAsnafs), new Action<TblAsnaf>(this.detach_TblAsnafs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CDUnit_TblAsnaf", Storage="_TblAsnafs", ThisKey="UnitId", OtherKey="UnitId")]
		public EntitySet<TblAsnaf> TblAsnafs
		{
			get
			{
				return this._TblAsnafs;
			}
			set
			{
				this._TblAsnafs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblAsnafs(TblAsnaf entity)
		{
			this.SendPropertyChanging();
			entity.CDUnit = this;
		}
		
		private void detach_TblAsnafs(TblAsnaf entity)
		{
			this.SendPropertyChanging();
			entity.CDUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblAsnaf")]
	public partial class TblAsnaf : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SanfID;
		
		private int _SanfCategoryID;
		
		private string _SanfName;
		
		private string _Sanfbarcode;
		
		private double _ReOrder;
		
		private int _UnitId;
		
		private string _sanfdes;
		
		private int _UserIn;
		
		private System.DateTime _dateIn;
		
		private EntityRef<CDUnit> _CDUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSanfIDChanging(int value);
    partial void OnSanfIDChanged();
    partial void OnSanfCategoryIDChanging(int value);
    partial void OnSanfCategoryIDChanged();
    partial void OnSanfNameChanging(string value);
    partial void OnSanfNameChanged();
    partial void OnSanfbarcodeChanging(string value);
    partial void OnSanfbarcodeChanged();
    partial void OnReOrderChanging(double value);
    partial void OnReOrderChanged();
    partial void OnUnitIdChanging(int value);
    partial void OnUnitIdChanged();
    partial void OnsanfdesChanging(string value);
    partial void OnsanfdesChanged();
    partial void OnUserInChanging(int value);
    partial void OnUserInChanged();
    partial void OndateInChanging(System.DateTime value);
    partial void OndateInChanged();
    #endregion
		
		public TblAsnaf()
		{
			this._CDUnit = default(EntityRef<CDUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SanfID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SanfID
		{
			get
			{
				return this._SanfID;
			}
			set
			{
				if ((this._SanfID != value))
				{
					this.OnSanfIDChanging(value);
					this.SendPropertyChanging();
					this._SanfID = value;
					this.SendPropertyChanged("SanfID");
					this.OnSanfIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SanfCategoryID", DbType="Int NOT NULL")]
		public int SanfCategoryID
		{
			get
			{
				return this._SanfCategoryID;
			}
			set
			{
				if ((this._SanfCategoryID != value))
				{
					this.OnSanfCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SanfCategoryID = value;
					this.SendPropertyChanged("SanfCategoryID");
					this.OnSanfCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SanfName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SanfName
		{
			get
			{
				return this._SanfName;
			}
			set
			{
				if ((this._SanfName != value))
				{
					this.OnSanfNameChanging(value);
					this.SendPropertyChanging();
					this._SanfName = value;
					this.SendPropertyChanged("SanfName");
					this.OnSanfNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sanfbarcode", DbType="NVarChar(20)")]
		public string Sanfbarcode
		{
			get
			{
				return this._Sanfbarcode;
			}
			set
			{
				if ((this._Sanfbarcode != value))
				{
					this.OnSanfbarcodeChanging(value);
					this.SendPropertyChanging();
					this._Sanfbarcode = value;
					this.SendPropertyChanged("Sanfbarcode");
					this.OnSanfbarcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReOrder", DbType="Float NOT NULL")]
		public double ReOrder
		{
			get
			{
				return this._ReOrder;
			}
			set
			{
				if ((this._ReOrder != value))
				{
					this.OnReOrderChanging(value);
					this.SendPropertyChanging();
					this._ReOrder = value;
					this.SendPropertyChanged("ReOrder");
					this.OnReOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitId", DbType="Int NOT NULL")]
		public int UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					if (this._CDUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sanfdes", DbType="NVarChar(150)")]
		public string sanfdes
		{
			get
			{
				return this._sanfdes;
			}
			set
			{
				if ((this._sanfdes != value))
				{
					this.OnsanfdesChanging(value);
					this.SendPropertyChanging();
					this._sanfdes = value;
					this.SendPropertyChanged("sanfdes");
					this.OnsanfdesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIn", DbType="Int NOT NULL")]
		public int UserIn
		{
			get
			{
				return this._UserIn;
			}
			set
			{
				if ((this._UserIn != value))
				{
					this.OnUserInChanging(value);
					this.SendPropertyChanging();
					this._UserIn = value;
					this.SendPropertyChanged("UserIn");
					this.OnUserInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateIn", DbType="DateTime NOT NULL")]
		public System.DateTime dateIn
		{
			get
			{
				return this._dateIn;
			}
			set
			{
				if ((this._dateIn != value))
				{
					this.OndateInChanging(value);
					this.SendPropertyChanging();
					this._dateIn = value;
					this.SendPropertyChanged("dateIn");
					this.OndateInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CDUnit_TblAsnaf", Storage="_CDUnit", ThisKey="UnitId", OtherKey="UnitId", IsForeignKey=true)]
		public CDUnit CDUnit
		{
			get
			{
				return this._CDUnit.Entity;
			}
			set
			{
				CDUnit previousValue = this._CDUnit.Entity;
				if (((previousValue != value) 
							|| (this._CDUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CDUnit.Entity = null;
						previousValue.TblAsnafs.Remove(this);
					}
					this._CDUnit.Entity = value;
					if ((value != null))
					{
						value.TblAsnafs.Add(this);
						this._UnitId = value.UnitId;
					}
					else
					{
						this._UnitId = default(int);
					}
					this.SendPropertyChanged("CDUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CDBuyorderreson")]
	public partial class CDBuyorderreson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _BuyorderresonId;
		
		private string _Buyorderreson;
		
		private EntitySet<TBLBuyorder> _TBLBuyorders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuyorderresonIdChanging(byte value);
    partial void OnBuyorderresonIdChanged();
    partial void OnBuyorderresonChanging(string value);
    partial void OnBuyorderresonChanged();
    #endregion
		
		public CDBuyorderreson()
		{
			this._TBLBuyorders = new EntitySet<TBLBuyorder>(new Action<TBLBuyorder>(this.attach_TBLBuyorders), new Action<TBLBuyorder>(this.detach_TBLBuyorders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyorderresonId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte BuyorderresonId
		{
			get
			{
				return this._BuyorderresonId;
			}
			set
			{
				if ((this._BuyorderresonId != value))
				{
					this.OnBuyorderresonIdChanging(value);
					this.SendPropertyChanging();
					this._BuyorderresonId = value;
					this.SendPropertyChanged("BuyorderresonId");
					this.OnBuyorderresonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Buyorderreson", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Buyorderreson
		{
			get
			{
				return this._Buyorderreson;
			}
			set
			{
				if ((this._Buyorderreson != value))
				{
					this.OnBuyorderresonChanging(value);
					this.SendPropertyChanging();
					this._Buyorderreson = value;
					this.SendPropertyChanged("Buyorderreson");
					this.OnBuyorderresonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CDBuyorderreson_TBLBuyorder", Storage="_TBLBuyorders", ThisKey="BuyorderresonId", OtherKey="BuyorderresonId")]
		public EntitySet<TBLBuyorder> TBLBuyorders
		{
			get
			{
				return this._TBLBuyorders;
			}
			set
			{
				this._TBLBuyorders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBLBuyorders(TBLBuyorder entity)
		{
			this.SendPropertyChanging();
			entity.CDBuyorderreson = this;
		}
		
		private void detach_TBLBuyorders(TBLBuyorder entity)
		{
			this.SendPropertyChanging();
			entity.CDBuyorderreson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CDAsnaftype")]
	public partial class CDAsnaftype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _AsnaftypeId;
		
		private string _Asnaftype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAsnaftypeIdChanging(byte value);
    partial void OnAsnaftypeIdChanged();
    partial void OnAsnaftypeChanging(string value);
    partial void OnAsnaftypeChanged();
    #endregion
		
		public CDAsnaftype()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AsnaftypeId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte AsnaftypeId
		{
			get
			{
				return this._AsnaftypeId;
			}
			set
			{
				if ((this._AsnaftypeId != value))
				{
					this.OnAsnaftypeIdChanging(value);
					this.SendPropertyChanging();
					this._AsnaftypeId = value;
					this.SendPropertyChanged("AsnaftypeId");
					this.OnAsnaftypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Asnaftype", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Asnaftype
		{
			get
			{
				return this._Asnaftype;
			}
			set
			{
				if ((this._Asnaftype != value))
				{
					this.OnAsnaftypeChanging(value);
					this.SendPropertyChanging();
					this._Asnaftype = value;
					this.SendPropertyChanged("Asnaftype");
					this.OnAsnaftypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLSuppliers")]
	public partial class TBLSupplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierId;
		
		private string _SupplierName;
		
		private string _Suppliersegl;
		
		private string _Suppliernashat;
		
		private string _Supplierdrebea;
		
		private string _Suppliermobile;
		
		private string _Suppliertel;
		
		private string _Supplierfax;
		
		private string _Supplieraddress;
		
		private string _Suppliermail;
		
		private int _UserIn;
		
		private System.DateTime _dateIn;
		
		private EntitySet<TBLTwreedOrder> _TBLTwreedOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnSupplierNameChanging(string value);
    partial void OnSupplierNameChanged();
    partial void OnSupplierseglChanging(string value);
    partial void OnSupplierseglChanged();
    partial void OnSuppliernashatChanging(string value);
    partial void OnSuppliernashatChanged();
    partial void OnSupplierdrebeaChanging(string value);
    partial void OnSupplierdrebeaChanged();
    partial void OnSuppliermobileChanging(string value);
    partial void OnSuppliermobileChanged();
    partial void OnSuppliertelChanging(string value);
    partial void OnSuppliertelChanged();
    partial void OnSupplierfaxChanging(string value);
    partial void OnSupplierfaxChanged();
    partial void OnSupplieraddressChanging(string value);
    partial void OnSupplieraddressChanged();
    partial void OnSuppliermailChanging(string value);
    partial void OnSuppliermailChanged();
    partial void OnUserInChanging(int value);
    partial void OnUserInChanged();
    partial void OndateInChanging(System.DateTime value);
    partial void OndateInChanged();
    #endregion
		
		public TBLSupplier()
		{
			this._TBLTwreedOrders = new EntitySet<TBLTwreedOrder>(new Action<TBLTwreedOrder>(this.attach_TBLTwreedOrders), new Action<TBLTwreedOrder>(this.detach_TBLTwreedOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this.OnSupplierNameChanging(value);
					this.SendPropertyChanging();
					this._SupplierName = value;
					this.SendPropertyChanged("SupplierName");
					this.OnSupplierNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suppliersegl", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Suppliersegl
		{
			get
			{
				return this._Suppliersegl;
			}
			set
			{
				if ((this._Suppliersegl != value))
				{
					this.OnSupplierseglChanging(value);
					this.SendPropertyChanging();
					this._Suppliersegl = value;
					this.SendPropertyChanged("Suppliersegl");
					this.OnSupplierseglChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suppliernashat", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Suppliernashat
		{
			get
			{
				return this._Suppliernashat;
			}
			set
			{
				if ((this._Suppliernashat != value))
				{
					this.OnSuppliernashatChanging(value);
					this.SendPropertyChanging();
					this._Suppliernashat = value;
					this.SendPropertyChanged("Suppliernashat");
					this.OnSuppliernashatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplierdrebea", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Supplierdrebea
		{
			get
			{
				return this._Supplierdrebea;
			}
			set
			{
				if ((this._Supplierdrebea != value))
				{
					this.OnSupplierdrebeaChanging(value);
					this.SendPropertyChanging();
					this._Supplierdrebea = value;
					this.SendPropertyChanged("Supplierdrebea");
					this.OnSupplierdrebeaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suppliermobile", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Suppliermobile
		{
			get
			{
				return this._Suppliermobile;
			}
			set
			{
				if ((this._Suppliermobile != value))
				{
					this.OnSuppliermobileChanging(value);
					this.SendPropertyChanging();
					this._Suppliermobile = value;
					this.SendPropertyChanged("Suppliermobile");
					this.OnSuppliermobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suppliertel", DbType="NVarChar(20)")]
		public string Suppliertel
		{
			get
			{
				return this._Suppliertel;
			}
			set
			{
				if ((this._Suppliertel != value))
				{
					this.OnSuppliertelChanging(value);
					this.SendPropertyChanging();
					this._Suppliertel = value;
					this.SendPropertyChanged("Suppliertel");
					this.OnSuppliertelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplierfax", DbType="NVarChar(50)")]
		public string Supplierfax
		{
			get
			{
				return this._Supplierfax;
			}
			set
			{
				if ((this._Supplierfax != value))
				{
					this.OnSupplierfaxChanging(value);
					this.SendPropertyChanging();
					this._Supplierfax = value;
					this.SendPropertyChanged("Supplierfax");
					this.OnSupplierfaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplieraddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Supplieraddress
		{
			get
			{
				return this._Supplieraddress;
			}
			set
			{
				if ((this._Supplieraddress != value))
				{
					this.OnSupplieraddressChanging(value);
					this.SendPropertyChanging();
					this._Supplieraddress = value;
					this.SendPropertyChanged("Supplieraddress");
					this.OnSupplieraddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suppliermail", DbType="NVarChar(100)")]
		public string Suppliermail
		{
			get
			{
				return this._Suppliermail;
			}
			set
			{
				if ((this._Suppliermail != value))
				{
					this.OnSuppliermailChanging(value);
					this.SendPropertyChanging();
					this._Suppliermail = value;
					this.SendPropertyChanged("Suppliermail");
					this.OnSuppliermailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIn", DbType="Int NOT NULL")]
		public int UserIn
		{
			get
			{
				return this._UserIn;
			}
			set
			{
				if ((this._UserIn != value))
				{
					this.OnUserInChanging(value);
					this.SendPropertyChanging();
					this._UserIn = value;
					this.SendPropertyChanged("UserIn");
					this.OnUserInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateIn", DbType="DateTime NOT NULL")]
		public System.DateTime dateIn
		{
			get
			{
				return this._dateIn;
			}
			set
			{
				if ((this._dateIn != value))
				{
					this.OndateInChanging(value);
					this.SendPropertyChanging();
					this._dateIn = value;
					this.SendPropertyChanged("dateIn");
					this.OndateInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLSupplier_TBLTwreedOrder", Storage="_TBLTwreedOrders", ThisKey="SupplierId", OtherKey="SupplierId")]
		public EntitySet<TBLTwreedOrder> TBLTwreedOrders
		{
			get
			{
				return this._TBLTwreedOrders;
			}
			set
			{
				this._TBLTwreedOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBLTwreedOrders(TBLTwreedOrder entity)
		{
			this.SendPropertyChanging();
			entity.TBLSupplier = this;
		}
		
		private void detach_TBLTwreedOrders(TBLTwreedOrder entity)
		{
			this.SendPropertyChanging();
			entity.TBLSupplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLBuyorder")]
	public partial class TBLBuyorder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BuyorderId;
		
		private System.DateTime _Buyorderdate;
		
		private byte _DepertmentId;
		
		private byte _BuyorderresonId;
		
		private System.DateTime _moznadate;
		
		private bool _closeorder;
		
		private System.Nullable<System.DateTime> _dateclose;
		
		private System.DateTime _dateIn;
		
		private int _UserIn;
		
		private EntityRef<CDBuyorderreson> _CDBuyorderreson;
		
		private EntityRef<CdDepertment> _CdDepertment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuyorderIdChanging(int value);
    partial void OnBuyorderIdChanged();
    partial void OnBuyorderdateChanging(System.DateTime value);
    partial void OnBuyorderdateChanged();
    partial void OnDepertmentIdChanging(byte value);
    partial void OnDepertmentIdChanged();
    partial void OnBuyorderresonIdChanging(byte value);
    partial void OnBuyorderresonIdChanged();
    partial void OnmoznadateChanging(System.DateTime value);
    partial void OnmoznadateChanged();
    partial void OncloseorderChanging(bool value);
    partial void OncloseorderChanged();
    partial void OndatecloseChanging(System.Nullable<System.DateTime> value);
    partial void OndatecloseChanged();
    partial void OndateInChanging(System.DateTime value);
    partial void OndateInChanged();
    partial void OnUserInChanging(int value);
    partial void OnUserInChanged();
    #endregion
		
		public TBLBuyorder()
		{
			this._CDBuyorderreson = default(EntityRef<CDBuyorderreson>);
			this._CdDepertment = default(EntityRef<CdDepertment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyorderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BuyorderId
		{
			get
			{
				return this._BuyorderId;
			}
			set
			{
				if ((this._BuyorderId != value))
				{
					this.OnBuyorderIdChanging(value);
					this.SendPropertyChanging();
					this._BuyorderId = value;
					this.SendPropertyChanged("BuyorderId");
					this.OnBuyorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Buyorderdate", DbType="Date NOT NULL")]
		public System.DateTime Buyorderdate
		{
			get
			{
				return this._Buyorderdate;
			}
			set
			{
				if ((this._Buyorderdate != value))
				{
					this.OnBuyorderdateChanging(value);
					this.SendPropertyChanging();
					this._Buyorderdate = value;
					this.SendPropertyChanged("Buyorderdate");
					this.OnBuyorderdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepertmentId", DbType="TinyInt NOT NULL")]
		public byte DepertmentId
		{
			get
			{
				return this._DepertmentId;
			}
			set
			{
				if ((this._DepertmentId != value))
				{
					if (this._CdDepertment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepertmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepertmentId = value;
					this.SendPropertyChanged("DepertmentId");
					this.OnDepertmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyorderresonId", DbType="TinyInt NOT NULL")]
		public byte BuyorderresonId
		{
			get
			{
				return this._BuyorderresonId;
			}
			set
			{
				if ((this._BuyorderresonId != value))
				{
					if (this._CDBuyorderreson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyorderresonIdChanging(value);
					this.SendPropertyChanging();
					this._BuyorderresonId = value;
					this.SendPropertyChanged("BuyorderresonId");
					this.OnBuyorderresonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moznadate", DbType="Date NOT NULL")]
		public System.DateTime moznadate
		{
			get
			{
				return this._moznadate;
			}
			set
			{
				if ((this._moznadate != value))
				{
					this.OnmoznadateChanging(value);
					this.SendPropertyChanging();
					this._moznadate = value;
					this.SendPropertyChanged("moznadate");
					this.OnmoznadateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_closeorder", DbType="Bit NOT NULL")]
		public bool closeorder
		{
			get
			{
				return this._closeorder;
			}
			set
			{
				if ((this._closeorder != value))
				{
					this.OncloseorderChanging(value);
					this.SendPropertyChanging();
					this._closeorder = value;
					this.SendPropertyChanged("closeorder");
					this.OncloseorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateclose", DbType="Date")]
		public System.Nullable<System.DateTime> dateclose
		{
			get
			{
				return this._dateclose;
			}
			set
			{
				if ((this._dateclose != value))
				{
					this.OndatecloseChanging(value);
					this.SendPropertyChanging();
					this._dateclose = value;
					this.SendPropertyChanged("dateclose");
					this.OndatecloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateIn", DbType="DateTime NOT NULL")]
		public System.DateTime dateIn
		{
			get
			{
				return this._dateIn;
			}
			set
			{
				if ((this._dateIn != value))
				{
					this.OndateInChanging(value);
					this.SendPropertyChanging();
					this._dateIn = value;
					this.SendPropertyChanged("dateIn");
					this.OndateInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIn", DbType="Int NOT NULL")]
		public int UserIn
		{
			get
			{
				return this._UserIn;
			}
			set
			{
				if ((this._UserIn != value))
				{
					this.OnUserInChanging(value);
					this.SendPropertyChanging();
					this._UserIn = value;
					this.SendPropertyChanged("UserIn");
					this.OnUserInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CDBuyorderreson_TBLBuyorder", Storage="_CDBuyorderreson", ThisKey="BuyorderresonId", OtherKey="BuyorderresonId", IsForeignKey=true)]
		public CDBuyorderreson CDBuyorderreson
		{
			get
			{
				return this._CDBuyorderreson.Entity;
			}
			set
			{
				CDBuyorderreson previousValue = this._CDBuyorderreson.Entity;
				if (((previousValue != value) 
							|| (this._CDBuyorderreson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CDBuyorderreson.Entity = null;
						previousValue.TBLBuyorders.Remove(this);
					}
					this._CDBuyorderreson.Entity = value;
					if ((value != null))
					{
						value.TBLBuyorders.Add(this);
						this._BuyorderresonId = value.BuyorderresonId;
					}
					else
					{
						this._BuyorderresonId = default(byte);
					}
					this.SendPropertyChanged("CDBuyorderreson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CdDepertment_TBLBuyorder", Storage="_CdDepertment", ThisKey="DepertmentId", OtherKey="DepertmentId", IsForeignKey=true)]
		public CdDepertment CdDepertment
		{
			get
			{
				return this._CdDepertment.Entity;
			}
			set
			{
				CdDepertment previousValue = this._CdDepertment.Entity;
				if (((previousValue != value) 
							|| (this._CdDepertment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CdDepertment.Entity = null;
						previousValue.TBLBuyorders.Remove(this);
					}
					this._CdDepertment.Entity = value;
					if ((value != null))
					{
						value.TBLBuyorders.Add(this);
						this._DepertmentId = value.DepertmentId;
					}
					else
					{
						this._DepertmentId = default(byte);
					}
					this.SendPropertyChanged("CdDepertment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLTwreedOrder")]
	public partial class TBLTwreedOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TwreedOrderId;
		
		private System.DateTime _TwreedOrderdate;
		
		private int _SupplierId;
		
		private string _twreedplace;
		
		private System.DateTime _twreddate;
		
		private int _Supplierofferno;
		
		private System.DateTime _dateIn;
		
		private int _UserIn;
		
		private EntitySet<TBLCheck> _TBLChecks;
		
		private EntityRef<TBLSupplier> _TBLSupplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTwreedOrderIdChanging(int value);
    partial void OnTwreedOrderIdChanged();
    partial void OnTwreedOrderdateChanging(System.DateTime value);
    partial void OnTwreedOrderdateChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OntwreedplaceChanging(string value);
    partial void OntwreedplaceChanged();
    partial void OntwreddateChanging(System.DateTime value);
    partial void OntwreddateChanged();
    partial void OnSupplieroffernoChanging(int value);
    partial void OnSupplieroffernoChanged();
    partial void OndateInChanging(System.DateTime value);
    partial void OndateInChanged();
    partial void OnUserInChanging(int value);
    partial void OnUserInChanged();
    #endregion
		
		public TBLTwreedOrder()
		{
			this._TBLChecks = new EntitySet<TBLCheck>(new Action<TBLCheck>(this.attach_TBLChecks), new Action<TBLCheck>(this.detach_TBLChecks));
			this._TBLSupplier = default(EntityRef<TBLSupplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwreedOrderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TwreedOrderId
		{
			get
			{
				return this._TwreedOrderId;
			}
			set
			{
				if ((this._TwreedOrderId != value))
				{
					this.OnTwreedOrderIdChanging(value);
					this.SendPropertyChanging();
					this._TwreedOrderId = value;
					this.SendPropertyChanged("TwreedOrderId");
					this.OnTwreedOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwreedOrderdate", DbType="Date NOT NULL")]
		public System.DateTime TwreedOrderdate
		{
			get
			{
				return this._TwreedOrderdate;
			}
			set
			{
				if ((this._TwreedOrderdate != value))
				{
					this.OnTwreedOrderdateChanging(value);
					this.SendPropertyChanging();
					this._TwreedOrderdate = value;
					this.SendPropertyChanged("TwreedOrderdate");
					this.OnTwreedOrderdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int NOT NULL")]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._TBLSupplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twreedplace", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string twreedplace
		{
			get
			{
				return this._twreedplace;
			}
			set
			{
				if ((this._twreedplace != value))
				{
					this.OntwreedplaceChanging(value);
					this.SendPropertyChanging();
					this._twreedplace = value;
					this.SendPropertyChanged("twreedplace");
					this.OntwreedplaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twreddate", DbType="Date NOT NULL")]
		public System.DateTime twreddate
		{
			get
			{
				return this._twreddate;
			}
			set
			{
				if ((this._twreddate != value))
				{
					this.OntwreddateChanging(value);
					this.SendPropertyChanging();
					this._twreddate = value;
					this.SendPropertyChanged("twreddate");
					this.OntwreddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplierofferno", DbType="Int NOT NULL")]
		public int Supplierofferno
		{
			get
			{
				return this._Supplierofferno;
			}
			set
			{
				if ((this._Supplierofferno != value))
				{
					this.OnSupplieroffernoChanging(value);
					this.SendPropertyChanging();
					this._Supplierofferno = value;
					this.SendPropertyChanged("Supplierofferno");
					this.OnSupplieroffernoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateIn", DbType="DateTime NOT NULL")]
		public System.DateTime dateIn
		{
			get
			{
				return this._dateIn;
			}
			set
			{
				if ((this._dateIn != value))
				{
					this.OndateInChanging(value);
					this.SendPropertyChanging();
					this._dateIn = value;
					this.SendPropertyChanged("dateIn");
					this.OndateInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIn", DbType="Int NOT NULL")]
		public int UserIn
		{
			get
			{
				return this._UserIn;
			}
			set
			{
				if ((this._UserIn != value))
				{
					this.OnUserInChanging(value);
					this.SendPropertyChanging();
					this._UserIn = value;
					this.SendPropertyChanged("UserIn");
					this.OnUserInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLTwreedOrder_TBLCheck", Storage="_TBLChecks", ThisKey="TwreedOrderId", OtherKey="TwreedOrderId")]
		public EntitySet<TBLCheck> TBLChecks
		{
			get
			{
				return this._TBLChecks;
			}
			set
			{
				this._TBLChecks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLSupplier_TBLTwreedOrder", Storage="_TBLSupplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public TBLSupplier TBLSupplier
		{
			get
			{
				return this._TBLSupplier.Entity;
			}
			set
			{
				TBLSupplier previousValue = this._TBLSupplier.Entity;
				if (((previousValue != value) 
							|| (this._TBLSupplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TBLSupplier.Entity = null;
						previousValue.TBLTwreedOrders.Remove(this);
					}
					this._TBLSupplier.Entity = value;
					if ((value != null))
					{
						value.TBLTwreedOrders.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("TBLSupplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TBLChecks(TBLCheck entity)
		{
			this.SendPropertyChanging();
			entity.TBLTwreedOrder = this;
		}
		
		private void detach_TBLChecks(TBLCheck entity)
		{
			this.SendPropertyChanging();
			entity.TBLTwreedOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CdJoblagna")]
	public partial class CdJoblagna : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _JobId;
		
		private string _JobName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(byte value);
    partial void OnJobIdChanged();
    partial void OnJobNameChanging(string value);
    partial void OnJobNameChanged();
    #endregion
		
		public CdJoblagna()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string JobName
		{
			get
			{
				return this._JobName;
			}
			set
			{
				if ((this._JobName != value))
				{
					this.OnJobNameChanging(value);
					this.SendPropertyChanging();
					this._JobName = value;
					this.SendPropertyChanged("JobName");
					this.OnJobNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CDStore")]
	public partial class CDStore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _StoreId;
		
		private string _Storename;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoreIdChanging(byte value);
    partial void OnStoreIdChanged();
    partial void OnStorenameChanging(string value);
    partial void OnStorenameChanged();
    #endregion
		
		public CDStore()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Storename", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Storename
		{
			get
			{
				return this._Storename;
			}
			set
			{
				if ((this._Storename != value))
				{
					this.OnStorenameChanging(value);
					this.SendPropertyChanging();
					this._Storename = value;
					this.SendPropertyChanged("Storename");
					this.OnStorenameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TBLCheck")]
	public partial class TBLCheck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChecklagnaID;
		
		private int _BuyorderId;
		
		private System.DateTime _Checklagnadate;
		
		private int _Decisionno;
		
		private int _TwreedOrderId;
		
		private System.DateTime _dateIn;
		
		private int _UserIn;
		
		private EntityRef<TBLTwreedOrder> _TBLTwreedOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChecklagnaIDChanging(int value);
    partial void OnChecklagnaIDChanged();
    partial void OnBuyorderIdChanging(int value);
    partial void OnBuyorderIdChanged();
    partial void OnChecklagnadateChanging(System.DateTime value);
    partial void OnChecklagnadateChanged();
    partial void OnDecisionnoChanging(int value);
    partial void OnDecisionnoChanged();
    partial void OnTwreedOrderIdChanging(int value);
    partial void OnTwreedOrderIdChanged();
    partial void OndateInChanging(System.DateTime value);
    partial void OndateInChanged();
    partial void OnUserInChanging(int value);
    partial void OnUserInChanged();
    #endregion
		
		public TBLCheck()
		{
			this._TBLTwreedOrder = default(EntityRef<TBLTwreedOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChecklagnaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChecklagnaID
		{
			get
			{
				return this._ChecklagnaID;
			}
			set
			{
				if ((this._ChecklagnaID != value))
				{
					this.OnChecklagnaIDChanging(value);
					this.SendPropertyChanging();
					this._ChecklagnaID = value;
					this.SendPropertyChanged("ChecklagnaID");
					this.OnChecklagnaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyorderId", DbType="Int NOT NULL")]
		public int BuyorderId
		{
			get
			{
				return this._BuyorderId;
			}
			set
			{
				if ((this._BuyorderId != value))
				{
					this.OnBuyorderIdChanging(value);
					this.SendPropertyChanging();
					this._BuyorderId = value;
					this.SendPropertyChanged("BuyorderId");
					this.OnBuyorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Checklagnadate", DbType="Date NOT NULL")]
		public System.DateTime Checklagnadate
		{
			get
			{
				return this._Checklagnadate;
			}
			set
			{
				if ((this._Checklagnadate != value))
				{
					this.OnChecklagnadateChanging(value);
					this.SendPropertyChanging();
					this._Checklagnadate = value;
					this.SendPropertyChanged("Checklagnadate");
					this.OnChecklagnadateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Decisionno", DbType="Int NOT NULL")]
		public int Decisionno
		{
			get
			{
				return this._Decisionno;
			}
			set
			{
				if ((this._Decisionno != value))
				{
					this.OnDecisionnoChanging(value);
					this.SendPropertyChanging();
					this._Decisionno = value;
					this.SendPropertyChanged("Decisionno");
					this.OnDecisionnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwreedOrderId", DbType="Int NOT NULL")]
		public int TwreedOrderId
		{
			get
			{
				return this._TwreedOrderId;
			}
			set
			{
				if ((this._TwreedOrderId != value))
				{
					if (this._TBLTwreedOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTwreedOrderIdChanging(value);
					this.SendPropertyChanging();
					this._TwreedOrderId = value;
					this.SendPropertyChanged("TwreedOrderId");
					this.OnTwreedOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateIn", DbType="DateTime NOT NULL")]
		public System.DateTime dateIn
		{
			get
			{
				return this._dateIn;
			}
			set
			{
				if ((this._dateIn != value))
				{
					this.OndateInChanging(value);
					this.SendPropertyChanging();
					this._dateIn = value;
					this.SendPropertyChanged("dateIn");
					this.OndateInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIn", DbType="Int NOT NULL")]
		public int UserIn
		{
			get
			{
				return this._UserIn;
			}
			set
			{
				if ((this._UserIn != value))
				{
					this.OnUserInChanging(value);
					this.SendPropertyChanging();
					this._UserIn = value;
					this.SendPropertyChanged("UserIn");
					this.OnUserInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TBLTwreedOrder_TBLCheck", Storage="_TBLTwreedOrder", ThisKey="TwreedOrderId", OtherKey="TwreedOrderId", IsForeignKey=true)]
		public TBLTwreedOrder TBLTwreedOrder
		{
			get
			{
				return this._TBLTwreedOrder.Entity;
			}
			set
			{
				TBLTwreedOrder previousValue = this._TBLTwreedOrder.Entity;
				if (((previousValue != value) 
							|| (this._TBLTwreedOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TBLTwreedOrder.Entity = null;
						previousValue.TBLChecks.Remove(this);
					}
					this._TBLTwreedOrder.Entity = value;
					if ((value != null))
					{
						value.TBLChecks.Add(this);
						this._TwreedOrderId = value.TwreedOrderId;
					}
					else
					{
						this._TwreedOrderId = default(int);
					}
					this.SendPropertyChanged("TBLTwreedOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
